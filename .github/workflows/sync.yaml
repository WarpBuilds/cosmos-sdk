name: Sync
on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/10 * * * *" # Runs every 10 minutes

jobs:
  sync:
    name: Sync With Upstream
    runs-on: warp-ubuntu-latest-x64-16x
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout with GitHub App Token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Sync with upstream repository
        run: |
          # Get the upstream repository URL from GitHub API
          REPO_NAME="${GITHUB_REPOSITORY}"
          UPSTREAM_INFO=$(gh api repos/$REPO_NAME | jq -r '.parent.clone_url // empty')

          if [ -z "$UPSTREAM_INFO" ]; then
            echo "This doesn't appear to be a fork or the API couldn't retrieve the parent repository"
            exit 1
          fi

          echo "Upstream repository: $UPSTREAM_INFO"

          # Check if upstream remote exists, add it if it doesn't
          if ! git remote | grep -q "^upstream$"; then
            git remote add upstream $UPSTREAM_INFO
          else
            git remote set-url upstream $UPSTREAM_INFO
          fi

          # Fetch from upstream and origin
          git fetch upstream
          git fetch origin

          # Store current branch (typically main)
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH"

          # Function to sync a branch with conflict resolution
          sync_branch() {
            local branch_name=$1
            echo "Syncing branch: $branch_name"

            # Get just the commit message from upstream
            UPSTREAM_COMMIT_MSG=$(git log -1 --pretty=format:"%s" upstream/$branch_name)
            echo "Latest upstream commit: $UPSTREAM_COMMIT_MSG"

            # Check if we need to merge (are we behind upstream?)
            if git merge-base --is-ancestor HEAD upstream/$branch_name; then
              echo "Already up to date with upstream/$branch_name"
            else
              # Debug - Check git version and environment
              echo "DEBUG: Git version"
              git --version
              echo "DEBUG: Current working directory"
              pwd
              echo "DEBUG: Available branches"
              git branch -a
              echo "DEBUG: Current git status"
              git status

              echo "DEBUG: Checking for upstream branch"
              git branch -r | grep upstream

              # Create merge directory
              mkdir -p /tmp/merge-work

              # More detailed debugging around the diff command
              echo "DEBUG: Running git diff to find changed files..."

              # Check if the upstream branch exists
              if git rev-parse --verify upstream/$branch_name >/dev/null 2>&1; then
                echo "DEBUG: upstream/$branch_name exists, proceeding with diff"

                # First just get raw diff output
                echo "DEBUG: Raw diff output:"
                git diff --name-only HEAD upstream/$branch_name || echo "Diff command failed with status $?"

                # Now get the actual changes for our variable
                echo "DEBUG: Getting filtered changes list..."
                UPSTREAM_CHANGES=$(git diff --name-only HEAD upstream/$branch_name 2>/dev/null | grep -v "^.github/workflows/" || echo "")

                echo "DEBUG: Diff operation completed"
                echo "Files to be updated from upstream:"
                echo "$UPSTREAM_CHANGES"

                if [ -z "$UPSTREAM_CHANGES" ]; then
                  echo "No changes to apply (or error getting changes)"
                  return 0
                fi

                # Process each changed file
                echo "Processing changed files..."
                for FILE in $UPSTREAM_CHANGES; do
                  echo "Processing: $FILE"
                  # Create directory structure if needed
                  mkdir -p "/tmp/merge-work/$(dirname "$FILE")"
                  # Copy the file from upstream
                  git show "upstream/$branch_name:$FILE" > "/tmp/merge-work/$FILE" || echo "Failed to copy: $FILE"
                done

                # Copy the changes back to our repository
                echo "Copying changes back to repository..."
                cp -r /tmp/merge-work/* ./

                # Add all changes
                git add .

                # Commit with the upstream commit message
                git commit -m "$UPSTREAM_COMMIT_MSG" || echo "No changes to commit"
              else
                echo "ERROR: upstream/$branch_name does not exist!"
                git remote -v
                return 1
              fi
            fi

            # Push changes to origin
            git push origin $branch_name
          }

          # ----- Sync current branch -----
          sync_branch "$CURRENT_BRANCH"

          echo "Sync complete"
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
